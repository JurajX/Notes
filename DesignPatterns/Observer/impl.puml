@startuml

enum Company {
    Apple
    Google
    IBM
}

interface Subscriber
{
    .. constructors and destructors ..
    + ~Subscriber()
    + Subscriber()
    .. other methods ..
    + {abstract} update(prices) -> void
}

class StockObserver
{
    .. constructors and destructors ..
    + ~StockObserver()
    + StockObserver()
    .. other methods ..
    + update(prices) -> void
    + printPrice() -> void
    __ private data __
    - company_
    - price_
}

Subscriber <|-- StockObserver
StockObserver o-- Company

interface Publisher
{
    .. constructors and destructors ..
    + ~Publisher()
    + Publisher()
    .. other methods ..
    + {abstract} regstr(Subscriber) -> void
    + {abstract} deregstr(Subscriber) -> void
    + {abstract} notifyAll() -> void
}

class StockGrabber
{
    .. constructors and destructors ..
    + StockGrabber()
    + ~StockGrabber()
    .. getters and setters ..
    + setPrice(Company, price) -> void
    .. other methods ..
    + regstr(Subscriber) -> void
    + deregstr(Subscriber) -> void
    + notifyAll() const -> void
    __ private data __
    - subscribers_
    - prices_
}

Publisher <|-- StockGrabber
Publisher o-- Subscriber

@enduml